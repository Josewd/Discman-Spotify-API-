{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surface pro 5\\\\Desktop\\\\insta-lab-hooks\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from \"styled-components\";\nimport FitaCassete from './components/FitaCassete';\nimport axios from 'axios';\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\nconst DivPlaylist = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  left: 0px;\n  top: 0px;\n  width: 25%;\n  box-shadow: 10px 20px 50px rgba(0,0,0,0.2);\n`;\nconst TrackDiv = styled.div`\n  display: flex;\n  align-items: center;\n  margin: auto;\n  width: 95%;\n  height:70px ;\n`;\nconst AlbumImage = styled.img`\n  border-radius: 5px;\n`;\nconst NameTrack = styled.h3`\n    font-family: 'Caveat', cursive;\n    color: #1B1B1F;\n    margin: auto;\n`;\n\nconst App = () => {\n  const [tracks, setTracks] = useState([]);\n  const [trackName, setTrackName] = useState('Awesome Playlist');\n  const [artistName, setArtistName] = useState('');\n\n  const getTracks = () => {\n    const urlSpotify = 'https://api.spotify.com/v1/me/tracks';\n    axios.get(urlSpotify, {\n      headers: {\n        Authorization: 'Bearer BQB6KyHGudmc9I5RbfFVZog3-sP8lUKdowtm7OMRv1xbz6HqUJ6obVzxeW4-SJjg6Ao9iIppJXWlw_biNaMeF6vvX0Iik0lUB6a9uaxgUM1b7LZ9Rj0BYGTIcPs0wCv_dYc5BrQu0MzoM6Tqrufq1ithWeaCAhpQ1dDDwUb7yP75Vm2iwZMGamfOrzZKF99mhOuXNDt2RmoFj34nn2ZetJSI_hxuAz8CJwu0YF530mJeLwdFCo7n3LH0dz6BqqojpYEy8FKCSJaajj8XKEQVh4YSi43jmEQ8TfA'\n      }\n    }).then(response => {\n      const arrayTracks = response.data.items.map(item => {\n        return {\n          getTrack: item.track.href,\n          trackName: item.track.name,\n          preview: item.track.preview_url,\n          artistName: item.track.artists[0].name,\n          getArtist: item.track.artists[0].href,\n          albumImage: item.track.album.images[2].url,\n          getAlbum: item.track.album.href,\n          albumName: item.track.album.name\n        };\n      });\n      setTracks(arrayTracks);\n      console.log(arrayTracks);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n\n  useEffect(() => {\n    getTracks();\n  }, []);\n\n  const playtrack = (preview, track, artist) => {\n    setTrackName(track);\n    set;\n  };\n\n  return React.createElement(AppContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(DivPlaylist, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, tracks && tracks.map(track => {\n    return React.createElement(TrackDiv, {\n      key: track.trackName,\n      onClick: () => playtrack(track.preview, track.trackName, track.artistName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(AlbumImage, {\n      src: track.albumImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(NameTrack, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, track.trackName, \" by: \", track.artistName));\n  })), React.createElement(FitaCassete, {\n    songTitle: \"Beautifull People by Ed Sheeran\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/surface pro 5/Desktop/insta-lab-hooks/src/App.js"],"names":["React","useState","useEffect","styled","FitaCassete","axios","AppContainer","div","DivPlaylist","TrackDiv","AlbumImage","img","NameTrack","h3","App","tracks","setTracks","trackName","setTrackName","artistName","setArtistName","getTracks","urlSpotify","get","headers","Authorization","then","response","arrayTracks","data","items","map","item","getTrack","track","href","name","preview","preview_url","artists","getArtist","albumImage","album","images","url","getAlbum","albumName","console","log","catch","error","message","playtrack","artist","set"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,MAAMC,YAAY,GAAGH,MAAM,CAACI,GAAK;;;;;CAAjC;AAOA,MAAMC,WAAW,GAAGL,MAAM,CAACI,GAAI;;;;;;;;;;CAA/B;AAYA,MAAME,QAAQ,GAAGN,MAAM,CAACI,GAAI;;;;;;CAA5B;AAOA,MAAMG,UAAU,GAAGP,MAAM,CAACQ,GAAI;;CAA9B;AAIA,MAAMC,SAAS,GAAGT,MAAM,CAACU,EAAG;;;;CAA5B;;AAOA,MAAMC,GAAG,GAAG,MAAM;AAEhB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAqBf,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,kBAAD,CAA1C;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMoB,SAAS,GAAG,MAAI;AACpB,UAAMC,UAAU,GAAG,sCAAnB;AACAjB,IAAAA,KAAK,CAACkB,GAAN,CAAUD,UAAV,EAAsB;AACpBE,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE;AADR;AADW,KAAtB,EAIGC,IAJH,CAIQC,QAAQ,IAAE;AAEhB,YAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,KAAd,CAAoBC,GAApB,CAAwBC,IAAI,IAAE;AAChD,eAAO;AACLC,UAAAA,QAAQ,EAAED,IAAI,CAACE,KAAL,CAAWC,IADhB;AAELlB,UAAAA,SAAS,EAAEe,IAAI,CAACE,KAAL,CAAWE,IAFjB;AAGLC,UAAAA,OAAO,EAAEL,IAAI,CAACE,KAAL,CAAWI,WAHf;AAILnB,UAAAA,UAAU,EAAEa,IAAI,CAACE,KAAL,CAAWK,OAAX,CAAmB,CAAnB,EAAsBH,IAJ7B;AAKLI,UAAAA,SAAS,EAAER,IAAI,CAACE,KAAL,CAAWK,OAAX,CAAmB,CAAnB,EAAsBJ,IAL5B;AAMLM,UAAAA,UAAU,EAAET,IAAI,CAACE,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwB,CAAxB,EAA2BC,GANlC;AAOLC,UAAAA,QAAQ,EAAEb,IAAI,CAACE,KAAL,CAAWQ,KAAX,CAAiBP,IAPtB;AAQLW,UAAAA,SAAS,EAAEd,IAAI,CAACE,KAAL,CAAWQ,KAAX,CAAiBN;AARvB,SAAP;AAUD,OAXmB,CAApB;AAYApB,MAAAA,SAAS,CAACY,WAAD,CAAT;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYpB,WAAZ;AACD,KApBD,EAoBGqB,KApBH,CAoBSC,KAAK,IAAE;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,OAAlB;AACD,KAtBD;AAuBD,GAzBD;;AA0BAjD,EAAAA,SAAS,CAAC,MAAI;AACZmB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAM+B,SAAS,GAAG,CAACf,OAAD,EAAUH,KAAV,EAAiBmB,MAAjB,KAA0B;AAE1CnC,IAAAA,YAAY,CAACgB,KAAD,CAAZ;AACAoB,IAAAA,GAAG;AAEJ,GALD;;AAQA,SACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvC,MAAM,IAAIA,MAAM,CAACgB,GAAP,CAAWG,KAAK,IAAE;AAC3B,WAAO,oBAAC,QAAD;AACC,MAAA,GAAG,EAAEA,KAAK,CAACjB,SADZ;AAEC,MAAA,OAAO,EAAE,MAAImC,SAAS,CAAClB,KAAK,CAACG,OAAP,EAAgBH,KAAK,CAACjB,SAAtB,EAAiCiB,KAAK,CAACf,UAAvC,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGL,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAEe,KAAK,CAACO,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHK,EAIL,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAYP,KAAK,CAACjB,SAAlB,WAAkCiB,KAAK,CAACf,UAAxC,CAJK,CAAP;AAMD,GAPU,CADb,CADF,EAWC,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,iCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXD,CADF;AAgBD,CA5DD;;AA+DA,eAAeL,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport styled from \"styled-components\"\nimport FitaCassete from './components/FitaCassete';\nimport axios from 'axios'\n\n\n\nconst AppContainer = styled.div `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`\n\nconst DivPlaylist = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  left: 0px;\n  top: 0px;\n  width: 25%;\n  box-shadow: 10px 20px 50px rgba(0,0,0,0.2);\n`\n\nconst TrackDiv = styled.div`\n  display: flex;\n  align-items: center;\n  margin: auto;\n  width: 95%;\n  height:70px ;\n`\nconst AlbumImage = styled.img`\n  border-radius: 5px;\n`\n\nconst NameTrack = styled.h3`\n    font-family: 'Caveat', cursive;\n    color: #1B1B1F;\n    margin: auto;\n`\n\n\nconst App = () => {\n\n  const [tracks, setTracks]= useState([])\n  const [trackName, setTrackName] = useState('Awesome Playlist')\n  const [artistName, setArtistName] = useState('')\n\n  const getTracks = ()=>{\n    const urlSpotify = 'https://api.spotify.com/v1/me/tracks'\n    axios.get(urlSpotify, {\n      headers: {\n        Authorization: 'Bearer BQB6KyHGudmc9I5RbfFVZog3-sP8lUKdowtm7OMRv1xbz6HqUJ6obVzxeW4-SJjg6Ao9iIppJXWlw_biNaMeF6vvX0Iik0lUB6a9uaxgUM1b7LZ9Rj0BYGTIcPs0wCv_dYc5BrQu0MzoM6Tqrufq1ithWeaCAhpQ1dDDwUb7yP75Vm2iwZMGamfOrzZKF99mhOuXNDt2RmoFj34nn2ZetJSI_hxuAz8CJwu0YF530mJeLwdFCo7n3LH0dz6BqqojpYEy8FKCSJaajj8XKEQVh4YSi43jmEQ8TfA' \n      }\n    }).then(response=>{\n      \n      const arrayTracks = response.data.items.map(item=>{\n        return {\n          getTrack: item.track.href,\n          trackName: item.track.name,\n          preview: item.track.preview_url,\n          artistName: item.track.artists[0].name,\n          getArtist: item.track.artists[0].href,\n          albumImage: item.track.album.images[2].url,\n          getAlbum: item.track.album.href,\n          albumName: item.track.album.name\n        }\n      })\n      setTracks(arrayTracks)\n      console.log(arrayTracks)\n    }).catch(error=>{\n      console.log(error.message)\n    })\n  }\n  useEffect(()=>{\n    getTracks()\n  }, [])\n\n  const playtrack = (preview, track, artist)=>{\n\n    setTrackName(track)\n    set\n\n  }\n\n\n  return (\n    <AppContainer>\n      <DivPlaylist >\n        {tracks && tracks.map(track=>{\n          return <TrackDiv \n                  key={track.trackName}\n                  onClick={()=>playtrack(track.preview, track.trackName, track.artistName)}>\n            <AlbumImage src={track.albumImage}/>\n            <NameTrack>{track.trackName} by: {track.artistName}</NameTrack>\n          </TrackDiv>\n        })}\n      </DivPlaylist>\n     <FitaCassete songTitle='Beautifull People by Ed Sheeran'/>\n      \n    </AppContainer>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}